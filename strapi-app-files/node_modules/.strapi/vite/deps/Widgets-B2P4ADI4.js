import {
  StageColumn
} from "./chunk-SSQ5PVUY.js";
import "./chunk-H5V77KLQ.js";
import {
  useGetRecentlyAssignedDocumentsQuery
} from "./chunk-HN64VDPK.js";
import "./chunk-RQHYDXZB.js";
import "./chunk-WL3D4XQW.js";
import "./chunk-K5YVIKMZ.js";
import "./chunk-TW3VHSMT.js";
import {
  DocumentStatus,
  RelativeTime
} from "./chunk-VGG4CVQC.js";
import "./chunk-6LY4MOO2.js";
import "./chunk-I2PEGCZV.js";
import "./chunk-F2WMQ37H.js";
import "./chunk-F5O3TD2V.js";
import "./chunk-7VMRUV6J.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-PUPBGM4J.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-XMUD7QK4.js";
import "./chunk-OZ7OQI3C.js";
import {
  Widget
} from "./chunk-WYEUILB3.js";
import "./chunk-OAYE4P5L.js";
import "./chunk-TW6WFEN7.js";
import "./chunk-T7JYKXZQ.js";
import "./chunk-EOBQJMDV.js";
import "./chunk-WL577IQS.js";
import "./chunk-7B7UX53L.js";
import "./chunk-E2I7F5IN.js";
import "./chunk-M5YBKSCP.js";
import "./chunk-MG6GVTTV.js";
import "./chunk-JBOSK23S.js";
import "./chunk-6NB2KJLJ.js";
import "./chunk-4F3C42IZ.js";
import "./chunk-XCHTUPV6.js";
import "./chunk-24LGVFMZ.js";
import "./chunk-THY74KYV.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-MLZELULN.js";
import "./chunk-K65KIEAL.js";
import "./chunk-I5J3KCMT.js";
import "./chunk-OW5D2KH4.js";
import "./chunk-JVE4PAXW.js";
import "./chunk-4VYA2RBA.js";
import "./chunk-MI4JPE5Y.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-GLPABT6F.js";
import "./chunk-EGNP2T5O.js";
import {
  useTracking
} from "./chunk-YXUW62HS.js";
import "./chunk-AKV3LNMU.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-QIJGNK42.js";
import "./chunk-QW2T7ORN.js";
import "./chunk-BOC3QIAA.js";
import "./chunk-3F6WQAJC.js";
import "./chunk-6DB7XAPQ.js";
import "./chunk-F6QZ7PI5.js";
import "./chunk-S6PN5ILC.js";
import "./chunk-G6UZHZ2R.js";
import "./chunk-BRN7ZBVU.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-JAYYPQ33.js";
import "./chunk-7OUKFKEM.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import "./chunk-LYROCNAN.js";
import "./chunk-7PGZYKEB.js";
import "./chunk-ATZ6TICT.js";
import "./chunk-EOM4SAGF.js";
import "./chunk-4BL2MWLB.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import "./chunk-CFQOBELM.js";
import {
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-LXDKCYMQ.js";
import "./chunk-5ZC4PE57.js";
import {
  Link,
  useNavigate
} from "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$1v
} from "./chunk-QW5ZDDTU.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-3CQBCJ3G.js";
import "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/review-workflows/dist/admin/components/Widgets.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var CellTypography = dt(Typography).attrs({
  maxWidth: "14.4rem",
  display: "block"
})`
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var RecentDocumentsTable = ({ documents }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (document) => {
    const isSingleType = document.kind === "singleType";
    const kindPath = isSingleType ? "single-types" : "collection-types";
    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : "";
    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? "" : "/" + document.documentId}${queryParams}`;
  };
  const handleRowClick = (document) => () => {
    trackUsage("willEditEntryFromHome");
    const link = getEditViewLink(document);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, {
    colCount: 6,
    rowCount: (documents == null ? void 0 : documents.length) ?? 0,
    children: (0, import_jsx_runtime.jsx)(Tbody, {
      children: documents == null ? void 0 : documents.map((document) => (0, import_jsx_runtime.jsxs)(Tr, {
        onClick: handleRowClick(document),
        cursor: "pointer",
        children: [
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              title: document.title,
              variant: "omega",
              textColor: "neutral800",
              children: document.title
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              variant: "omega",
              textColor: "neutral600",
              children: document.kind === "singleType" ? formatMessage({
                id: "content-manager.widget.last-edited.single-type",
                defaultMessage: "Single-Type"
              }) : formatMessage({
                id: document.contentTypeDisplayName,
                defaultMessage: document.contentTypeDisplayName
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: document.status ? (0, import_jsx_runtime.jsx)(DocumentStatus, {
                status: document.status
              }) : (0, import_jsx_runtime.jsx)(Typography, {
                textColor: "neutral600",
                "aria-hidden": true,
                children: "-"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Typography, {
              textColor: "neutral600",
              children: (0, import_jsx_runtime.jsx)(RelativeTime, {
                timestamp: new Date(document.updatedAt)
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(StageColumn, {
              strapi_stage: document.strapi_stage
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            onClick: (e) => e.stopPropagation(),
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: (0, import_jsx_runtime.jsx)(IconButton, {
                tag: Link,
                to: getEditViewLink(document),
                onClick: () => trackUsage("willEditEntryFromHome"),
                label: formatMessage({
                  id: "content-manager.actions.edit.label",
                  defaultMessage: "Edit"
                }),
                variant: "ghost",
                children: (0, import_jsx_runtime.jsx)(ForwardRef$1v, {})
              })
            })
          })
        ]
      }, document.documentId))
    })
  });
};
var AssignedWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentlyAssignedDocumentsQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "review-workflows.widget.assigned.no-data",
        defaultMessage: "No entries"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, {
    documents: data
  });
};
export {
  AssignedWidget
};
//# sourceMappingURL=Widgets-B2P4ADI4.js.map
